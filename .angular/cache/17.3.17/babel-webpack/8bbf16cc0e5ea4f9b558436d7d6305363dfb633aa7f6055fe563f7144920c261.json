{"ast":null,"code":"export class ExamplesComponent {\n  constructor() {\n    // Profile Form\n    this.profile = {\n      fullName: '',\n      email: '',\n      age: null,\n      bio: '',\n      skills: [],\n      theme: 'light',\n      notifications: {\n        email: false,\n        push: false\n      }\n    };\n    this.availableSkills = ['JavaScript', 'TypeScript', 'Angular', 'React', 'Vue', 'Node.js', 'Python', 'Java'];\n    // Dashboard\n    this.newWidgetType = '';\n    this.widgets = [{\n      type: 'metric',\n      title: 'Total Users',\n      value: '1,234',\n      label: 'Active Users',\n      change: 12.5\n    }, {\n      type: 'chart',\n      title: 'Monthly Growth',\n      data: [{\n        label: 'Jan',\n        value: 65\n      }, {\n        label: 'Feb',\n        value: 78\n      }, {\n        label: 'Mar',\n        value: 82\n      }, {\n        label: 'Apr',\n        value: 91\n      }]\n    }];\n    // Shopping Cart\n    this.availableProducts = [{\n      id: 1,\n      name: 'Laptop',\n      price: 999.99,\n      image: 'https://via.placeholder.com/100x100/667eea/ffffff?text=Laptop'\n    }, {\n      id: 2,\n      name: 'Mouse',\n      price: 29.99,\n      image: 'https://via.placeholder.com/100x100/764ba2/ffffff?text=Mouse'\n    }, {\n      id: 3,\n      name: 'Keyboard',\n      price: 89.99,\n      image: 'https://via.placeholder.com/100x100/667eea/ffffff?text=Keyboard'\n    }];\n    this.cart = [];\n    this.taxRate = 0.08;\n    // Theme Switcher\n    this.themeColors = {\n      primary: '#667eea',\n      secondary: '#764ba2',\n      background: '#ffffff',\n      text: '#333333'\n    };\n  }\n  // Methods\n  toggleSkill(skill) {\n    const index = this.profile.skills.indexOf(skill);\n    if (index > -1) {\n      this.profile.skills.splice(index, 1);\n    } else {\n      this.profile.skills.push(skill);\n    }\n  }\n  isFormValid() {\n    return Boolean(this.profile.fullName && this.profile.email);\n  }\n  saveProfile() {\n    console.log('Profile saved:', this.profile);\n    alert('Profile saved successfully!');\n  }\n  getNotificationStatus() {\n    const notifications = [];\n    if (this.profile.notifications.email) notifications.push('Email');\n    if (this.profile.notifications.push) notifications.push('Push');\n    return notifications.length > 0 ? notifications.join(', ') : 'None';\n  }\n  addWidget() {\n    const widget = this.createWidget(this.newWidgetType);\n    if (widget) {\n      this.widgets.push(widget);\n      this.newWidgetType = '';\n    }\n  }\n  removeWidget(index) {\n    this.widgets.splice(index, 1);\n  }\n  createWidget(type) {\n    switch (type) {\n      case 'chart':\n        return {\n          type: 'chart',\n          title: 'New Chart',\n          data: [{\n            label: 'A',\n            value: Math.floor(Math.random() * 100)\n          }, {\n            label: 'B',\n            value: Math.floor(Math.random() * 100)\n          }, {\n            label: 'C',\n            value: Math.floor(Math.random() * 100)\n          }]\n        };\n      case 'metric':\n        return {\n          type: 'metric',\n          title: 'New Metric',\n          value: Math.floor(Math.random() * 1000),\n          label: 'Units',\n          change: Math.floor(Math.random() * 20) - 10\n        };\n      case 'list':\n        return {\n          type: 'list',\n          title: 'New List',\n          items: [{\n            text: 'Item 1',\n            status: 'pending'\n          }, {\n            text: 'Item 2',\n            status: 'completed'\n          }, {\n            text: 'Item 3',\n            status: 'failed'\n          }]\n        };\n      case 'progress':\n        return {\n          type: 'progress',\n          title: 'New Progress',\n          progress: Math.floor(Math.random() * 100)\n        };\n      default:\n        return null;\n    }\n  }\n  getActiveWidgetsCount() {\n    return this.widgets.length;\n  }\n  addToCart(product) {\n    const existingItem = this.cart.find(item => item.product.id === product.id);\n    if (existingItem) {\n      existingItem.quantity++;\n    } else {\n      this.cart.push({\n        product,\n        quantity: 1\n      });\n    }\n  }\n  removeFromCart(index) {\n    this.cart.splice(index, 1);\n  }\n  increaseQuantity(index) {\n    this.cart[index].quantity++;\n  }\n  decreaseQuantity(index) {\n    if (this.cart[index].quantity > 1) {\n      this.cart[index].quantity--;\n    } else {\n      this.removeFromCart(index);\n    }\n  }\n  getSubtotal() {\n    return this.cart.reduce((sum, item) => sum + item.product.price * item.quantity, 0);\n  }\n  getTax() {\n    return this.getSubtotal() * this.taxRate;\n  }\n  getTotal() {\n    return this.getSubtotal() + this.getTax();\n  }\n  checkout() {\n    alert(`Total: $${this.getTotal().toFixed(2)}\\nThank you for your purchase!`);\n    this.cart = [];\n  }\n  updateTheme() {\n    // This would typically update CSS custom properties\n    console.log('Theme updated:', this.themeColors);\n  }\n  getThemeStyles() {\n    return `\n      --primary-color: ${this.themeColors.primary};\n      --secondary-color: ${this.themeColors.secondary};\n      --background-color: ${this.themeColors.background};\n      --text-color: ${this.themeColors.text};\n      background-color: ${this.themeColors.background};\n      color: ${this.themeColors.text};\n    `;\n  }\n  applyPreset(preset) {\n    const presets = {\n      default: {\n        primary: '#667eea',\n        secondary: '#764ba2',\n        background: '#ffffff',\n        text: '#333333'\n      },\n      dark: {\n        primary: '#4a5568',\n        secondary: '#2d3748',\n        background: '#1a202c',\n        text: '#f7fafc'\n      },\n      ocean: {\n        primary: '#3182ce',\n        secondary: '#2b6cb0',\n        background: '#ebf8ff',\n        text: '#2d3748'\n      },\n      sunset: {\n        primary: '#ed8936',\n        secondary: '#dd6b20',\n        background: '#fffaf0',\n        text: '#744210'\n      }\n    };\n    this.themeColors = {\n      ...presets[preset]\n    };\n    this.updateTheme();\n  }\n}","map":{"version":3,"names":["ExamplesComponent","constructor","profile","fullName","email","age","bio","skills","theme","notifications","push","availableSkills","newWidgetType","widgets","type","title","value","label","change","data","availableProducts","id","name","price","image","cart","taxRate","themeColors","primary","secondary","background","text","toggleSkill","skill","index","indexOf","splice","isFormValid","Boolean","saveProfile","console","log","alert","getNotificationStatus","length","join","addWidget","widget","createWidget","removeWidget","Math","floor","random","items","status","progress","getActiveWidgetsCount","addToCart","product","existingItem","find","item","quantity","removeFromCart","increaseQuantity","decreaseQuantity","getSubtotal","reduce","sum","getTax","getTotal","checkout","toFixed","updateTheme","getThemeStyles","applyPreset","preset","presets","default","dark","ocean","sunset"],"sources":["C:\\Wokrspace\\Angular\\Bindings\\src\\app\\examples\\examples.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-examples',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule],\r\n  template: `\r\n    <div class=\"container\">\r\n      <div class=\"page-header text-center mb-4\">\r\n        <h1>Practical Examples</h1>\r\n        <p>Real-world scenarios demonstrating Angular data bindings</p>\r\n      </div>\r\n\r\n      <div class=\"examples-grid grid grid-2\">\r\n        <!-- User Profile Form -->\r\n        <div class=\"example-card card\">\r\n          <h3>User Profile Form</h3>\r\n          <p class=\"example-description\">Complete form with various binding types</p>\r\n          \r\n          <form class=\"profile-form\" (ngSubmit)=\"saveProfile()\">\r\n            <div class=\"form-group\">\r\n              <label class=\"form-label\">Full Name *</label>\r\n              <input type=\"text\" class=\"form-input\" [(ngModel)]=\"profile.fullName\" name=\"fullName\" required>\r\n            </div>\r\n            \r\n            <div class=\"form-group\">\r\n              <label class=\"form-label\">Email *</label>\r\n              <input type=\"email\" class=\"form-input\" [(ngModel)]=\"profile.email\" name=\"email\" required>\r\n            </div>\r\n            \r\n            <div class=\"form-group\">\r\n              <label class=\"form-label\">Age</label>\r\n              <input type=\"number\" class=\"form-input\" [(ngModel)]=\"profile.age\" name=\"age\" min=\"13\" max=\"120\">\r\n            </div>\r\n            \r\n            <div class=\"form-group\">\r\n              <label class=\"form-label\">Bio</label>\r\n              <textarea class=\"form-input\" [(ngModel)]=\"profile.bio\" name=\"bio\" rows=\"3\" \r\n                        placeholder=\"Tell us about yourself...\"></textarea>\r\n            </div>\r\n            \r\n            <div class=\"form-group\">\r\n              <label class=\"form-label\">Skills</label>\r\n              <div class=\"skills-container\">\r\n                <div *ngFor=\"let skill of availableSkills\" class=\"skill-item\">\r\n                  <input type=\"checkbox\" [id]=\"'skill-' + skill\" \r\n                         [checked]=\"profile.skills.includes(skill)\"\r\n                         (change)=\"toggleSkill(skill)\">\r\n                  <label [for]=\"'skill-' + skill\">{{ skill }}</label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"form-group\">\r\n              <label class=\"form-label\">Theme</label>\r\n              <select class=\"form-input\" [(ngModel)]=\"profile.theme\" name=\"theme\">\r\n                <option value=\"light\">Light</option>\r\n                <option value=\"dark\">Dark</option>\r\n                <option value=\"auto\">Auto</option>\r\n              </select>\r\n            </div>\r\n            \r\n            <div class=\"form-group\">\r\n              <label class=\"form-label\">Notifications</label>\r\n              <div class=\"checkbox-group\">\r\n                <input type=\"checkbox\" [(ngModel)]=\"profile.notifications.email\" name=\"emailNotif\">\r\n                <label>Email notifications</label>\r\n              </div>\r\n              <div class=\"checkbox-group\">\r\n                <input type=\"checkbox\" [(ngModel)]=\"profile.notifications.push\" name=\"pushNotif\">\r\n                <label>Push notifications</label>\r\n              </div>\r\n            </div>\r\n            \r\n            <button type=\"submit\" class=\"btn\" [disabled]=\"!isFormValid()\">Save Profile</button>\r\n          </form>\r\n          \r\n          <div class=\"profile-preview card mt-4\" [class.theme-dark]=\"profile.theme === 'dark'\">\r\n            <h4>Profile Preview</h4>\r\n            <div class=\"preview-content\">\r\n              <p><strong>Name:</strong> {{ profile.fullName || 'Not specified' }}</p>\r\n              <p><strong>Email:</strong> {{ profile.email || 'Not specified' }}</p>\r\n              <p><strong>Age:</strong> {{ profile.age || 'Not specified' }}</p>\r\n              <p><strong>Bio:</strong> {{ profile.bio || 'No bio provided' }}</p>\r\n              <p><strong>Skills:</strong> {{ profile.skills.length > 0 ? profile.skills.join(', ') : 'None selected' }}</p>\r\n              <p><strong>Theme:</strong> {{ profile.theme }}</p>\r\n              <p><strong>Notifications:</strong> {{ getNotificationStatus() }}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Dynamic Dashboard -->\r\n        <div class=\"example-card card\">\r\n          <h3>Dynamic Dashboard</h3>\r\n          <p class=\"example-description\">Interactive dashboard with real-time updates</p>\r\n          \r\n          <div class=\"dashboard-controls\">\r\n            <div class=\"form-group\">\r\n              <label class=\"form-label\">Add Widget</label>\r\n              <div class=\"add-widget\">\r\n                <select class=\"form-input\" [(ngModel)]=\"newWidgetType\">\r\n                  <option value=\"\">Select widget type</option>\r\n                  <option value=\"chart\">Chart</option>\r\n                  <option value=\"metric\">Metric</option>\r\n                  <option value=\"list\">List</option>\r\n                  <option value=\"progress\">Progress</option>\r\n                </select>\r\n                <button class=\"btn\" (click)=\"addWidget()\" [disabled]=\"!newWidgetType\">Add</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"widgets-container\">\r\n            <div *ngFor=\"let widget of widgets; let i = index\" \r\n                 class=\"widget\" \r\n                 [class.widget-chart]=\"widget.type === 'chart'\"\r\n                 [class.widget-metric]=\"widget.type === 'metric'\"\r\n                 [class.widget-list]=\"widget.type === 'list'\"\r\n                 [class.widget-progress]=\"widget.type === 'progress'\">\r\n              \r\n              <div class=\"widget-header\">\r\n                <h4>{{ widget.title }}</h4>\r\n                <button class=\"btn-remove\" (click)=\"removeWidget(i)\">×</button>\r\n              </div>\r\n              \r\n              <div class=\"widget-content\">\r\n                <div *ngIf=\"widget.type === 'chart'\" class=\"chart-placeholder\">\r\n                  📊 Chart Widget\r\n                  <div class=\"chart-data\">\r\n                    <div *ngFor=\"let data of widget.data\" class=\"chart-bar\" \r\n                         [style.height]=\"data.value + '%'\"\r\n                         [title]=\"data.label + ': ' + data.value + '%'\">\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div *ngIf=\"widget.type === 'metric'\" class=\"metric-display\">\r\n                  <div class=\"metric-value\">{{ widget.value }}</div>\r\n                  <div class=\"metric-label\">{{ widget.label }}</div>\r\n                  <div class=\"metric-change\" [class.positive]=\"widget.change > 0\" [class.negative]=\"widget.change < 0\">\r\n                    {{ widget.change > 0 ? '+' : '' }}{{ widget.change }}%\r\n                  </div>\r\n                </div>\r\n                \r\n                <div *ngIf=\"widget.type === 'list'\" class=\"list-display\">\r\n                  <ul class=\"list-items\">\r\n                    <li *ngFor=\"let item of widget.items\" class=\"list-item\">\r\n                      <span class=\"item-text\">{{ item.text }}</span>\r\n                      <span class=\"item-status\" [class]=\"'status-' + item.status\">{{ item.status }}</span>\r\n                    </li>\r\n                  </ul>\r\n                </div>\r\n                \r\n                <div *ngIf=\"widget.type === 'progress'\" class=\"progress-display\">\r\n                  <div class=\"progress-bar\">\r\n                    <div class=\"progress-fill\" [style.width]=\"widget.progress + '%'\"></div>\r\n                  </div>\r\n                  <div class=\"progress-text\">{{ widget.progress }}% Complete</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"dashboard-stats\">\r\n            <div class=\"stat-item\">\r\n              <span class=\"stat-label\">Total Widgets:</span>\r\n              <span class=\"stat-value\">{{ widgets.length }}</span>\r\n            </div>\r\n            <div class=\"stat-item\">\r\n              <span class=\"stat-label\">Active Widgets:</span>\r\n              <span class=\"stat-value\">{{ getActiveWidgetsCount() }}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Shopping Cart -->\r\n        <div class=\"example-card card\">\r\n          <h3>Shopping Cart</h3>\r\n          <p class=\"example-description\">E-commerce cart with dynamic calculations</p>\r\n          \r\n          <div class=\"products-section\">\r\n            <h4>Available Products</h4>\r\n            <div class=\"products-grid\">\r\n              <div *ngFor=\"let product of availableProducts\" class=\"product-item\">\r\n                <img [src]=\"product.image\" [alt]=\"product.name\" class=\"product-image\">\r\n                <div class=\"product-info\">\r\n                  <h5>{{ product.name }}</h5>\r\n                  <p class=\"product-price\">{{ product.price | currency }}</p>\r\n                  <button class=\"btn\" (click)=\"addToCart(product)\">Add to Cart</button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"cart-section\">\r\n            <h4>Shopping Cart</h4>\r\n            <div *ngIf=\"cart.length === 0\" class=\"empty-cart\">\r\n              Your cart is empty\r\n            </div>\r\n            \r\n            <div *ngFor=\"let item of cart; let i = index\" class=\"cart-item\">\r\n              <img [src]=\"item.product.image\" [alt]=\"item.product.name\" class=\"cart-item-image\">\r\n              <div class=\"cart-item-details\">\r\n                <h6>{{ item.product.name }}</h6>\r\n                <p class=\"cart-item-price\">{{ item.product.price | currency }}</p>\r\n              </div>\r\n              <div class=\"cart-item-controls\">\r\n                <button class=\"btn-quantity\" (click)=\"decreaseQuantity(i)\">-</button>\r\n                <span class=\"quantity\">{{ item.quantity }}</span>\r\n                <button class=\"btn-quantity\" (click)=\"increaseQuantity(i)\">+</button>\r\n                <button class=\"btn-remove\" (click)=\"removeFromCart(i)\">×</button>\r\n              </div>\r\n            </div>\r\n            \r\n            <div *ngIf=\"cart.length > 0\" class=\"cart-summary\">\r\n              <div class=\"summary-row\">\r\n                <span>Subtotal:</span>\r\n                <span>{{ getSubtotal() | currency }}</span>\r\n              </div>\r\n              <div class=\"summary-row\">\r\n                <span>Tax ({{ taxRate * 100 }}%):</span>\r\n                <span>{{ getTax() | currency }}</span>\r\n              </div>\r\n              <div class=\"summary-row total\">\r\n                <span>Total:</span>\r\n                <span>{{ getTotal() | currency }}</span>\r\n              </div>\r\n              <button class=\"btn btn-primary\" (click)=\"checkout()\">Checkout</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Theme Switcher -->\r\n        <div class=\"example-card card\">\r\n          <h3>Theme Switcher</h3>\r\n          <p class=\"example-description\">Dynamic theme switching with CSS variables</p>\r\n          \r\n          <div class=\"theme-controls\">\r\n            <div class=\"form-group\">\r\n              <label class=\"form-label\">Primary Color</label>\r\n              <input type=\"color\" class=\"form-input\" [(ngModel)]=\"themeColors.primary\" \r\n                     (input)=\"updateTheme()\">\r\n            </div>\r\n            \r\n            <div class=\"form-group\">\r\n              <label class=\"form-label\">Secondary Color</label>\r\n              <input type=\"color\" class=\"form-input\" [(ngModel)]=\"themeColors.secondary\" \r\n                     (input)=\"updateTheme()\">\r\n            </div>\r\n            \r\n            <div class=\"form-group\">\r\n              <label class=\"form-label\">Background Color</label>\r\n              <input type=\"color\" class=\"form-input\" [(ngModel)]=\"themeColors.background\" \r\n                     (input)=\"updateTheme()\">\r\n            </div>\r\n            \r\n            <div class=\"form-group\">\r\n              <label class=\"form-label\">Text Color</label>\r\n              <input type=\"color\" class=\"form-input\" [(ngModel)]=\"themeColors.text\" \r\n                     (input)=\"updateTheme()\">\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"theme-preview\" [style]=\"getThemeStyles()\">\r\n            <h4>Theme Preview</h4>\r\n            <p>This is how your theme will look with the selected colors.</p>\r\n            <button class=\"btn\">Sample Button</button>\r\n            <div class=\"sample-card\">\r\n              <h5>Sample Card</h5>\r\n              <p>This card demonstrates the current theme colors.</p>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"theme-presets\">\r\n            <h4>Quick Presets</h4>\r\n            <div class=\"preset-buttons\">\r\n              <button class=\"btn\" (click)=\"applyPreset('default')\">Default</button>\r\n              <button class=\"btn\" (click)=\"applyPreset('dark')\">Dark</button>\r\n              <button class=\"btn\" (click)=\"applyPreset('ocean')\">Ocean</button>\r\n              <button class=\"btn\" (click)=\"applyPreset('sunset')\">Sunset</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .page-header h1 {\r\n      color: white;\r\n      font-size: 2.5rem;\r\n      font-weight: 700;\r\n      margin-bottom: 1rem;\r\n      text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\r\n    }\r\n\r\n    .page-header p {\r\n      color: rgba(255, 255, 255, 0.9);\r\n      font-size: 1.1rem;\r\n    }\r\n\r\n    .example-card h3 {\r\n      color: #333;\r\n      margin-bottom: 0.5rem;\r\n      font-weight: 600;\r\n    }\r\n\r\n    .example-description {\r\n      color: #666;\r\n      margin-bottom: 1.5rem;\r\n      font-style: italic;\r\n    }\r\n\r\n    /* Profile Form Styles */\r\n    .profile-form {\r\n      margin-bottom: 1rem;\r\n    }\r\n\r\n    .skills-container {\r\n      display: grid;\r\n      grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\r\n      gap: 0.5rem;\r\n    }\r\n\r\n    .skill-item {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 0.5rem;\r\n    }\r\n\r\n    .checkbox-group {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 0.5rem;\r\n      margin-bottom: 0.5rem;\r\n    }\r\n\r\n    .profile-preview {\r\n      background: #f8f9fa;\r\n      border: 2px solid #e9ecef;\r\n    }\r\n\r\n    .profile-preview.theme-dark {\r\n      background: #2d3748;\r\n      color: white;\r\n    }\r\n\r\n    .preview-content p {\r\n      margin-bottom: 0.5rem;\r\n    }\r\n\r\n    /* Dashboard Styles */\r\n    .dashboard-controls {\r\n      margin-bottom: 1rem;\r\n    }\r\n\r\n    .add-widget {\r\n      display: flex;\r\n      gap: 0.5rem;\r\n    }\r\n\r\n    .widgets-container {\r\n      display: grid;\r\n      gap: 1rem;\r\n      margin-bottom: 1rem;\r\n    }\r\n\r\n    .widget {\r\n      border: 2px solid #e9ecef;\r\n      border-radius: 8px;\r\n      padding: 1rem;\r\n      background: white;\r\n    }\r\n\r\n    .widget-header {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n      margin-bottom: 1rem;\r\n    }\r\n\r\n    .btn-remove {\r\n      background: #dc3545;\r\n      color: white;\r\n      border: none;\r\n      border-radius: 50%;\r\n      width: 24px;\r\n      height: 24px;\r\n      cursor: pointer;\r\n      font-size: 16px;\r\n      line-height: 1;\r\n    }\r\n\r\n    .chart-placeholder {\r\n      text-align: center;\r\n      font-size: 1.2rem;\r\n    }\r\n\r\n    .chart-data {\r\n      display: flex;\r\n      justify-content: space-around;\r\n      align-items: flex-end;\r\n      height: 100px;\r\n      margin-top: 1rem;\r\n    }\r\n\r\n    .chart-bar {\r\n      width: 20px;\r\n      background: #667eea;\r\n      border-radius: 2px;\r\n      transition: height 0.3s ease;\r\n    }\r\n\r\n    .metric-display {\r\n      text-align: center;\r\n    }\r\n\r\n    .metric-value {\r\n      font-size: 2rem;\r\n      font-weight: bold;\r\n      color: #667eea;\r\n    }\r\n\r\n    .metric-change {\r\n      font-size: 0.9rem;\r\n      margin-top: 0.5rem;\r\n    }\r\n\r\n    .metric-change.positive {\r\n      color: #28a745;\r\n    }\r\n\r\n    .metric-change.negative {\r\n      color: #dc3545;\r\n    }\r\n\r\n    .list-items {\r\n      list-style: none;\r\n      padding: 0;\r\n    }\r\n\r\n    .list-item {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      padding: 0.5rem 0;\r\n      border-bottom: 1px solid #eee;\r\n    }\r\n\r\n    .status-pending {\r\n      color: #ffc107;\r\n    }\r\n\r\n    .status-completed {\r\n      color: #28a745;\r\n    }\r\n\r\n    .status-failed {\r\n      color: #dc3545;\r\n    }\r\n\r\n    .progress-bar {\r\n      width: 100%;\r\n      height: 20px;\r\n      background: #e9ecef;\r\n      border-radius: 10px;\r\n      overflow: hidden;\r\n      margin-bottom: 0.5rem;\r\n    }\r\n\r\n    .progress-fill {\r\n      height: 100%;\r\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n      transition: width 0.3s ease;\r\n    }\r\n\r\n    .dashboard-stats {\r\n      display: flex;\r\n      justify-content: space-around;\r\n      background: #f8f9fa;\r\n      padding: 1rem;\r\n      border-radius: 8px;\r\n    }\r\n\r\n    .stat-item {\r\n      text-align: center;\r\n    }\r\n\r\n    .stat-value {\r\n      display: block;\r\n      font-size: 1.5rem;\r\n      font-weight: bold;\r\n      color: #667eea;\r\n    }\r\n\r\n    /* Shopping Cart Styles */\r\n    .products-grid {\r\n      display: grid;\r\n      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n      gap: 1rem;\r\n      margin-bottom: 1rem;\r\n    }\r\n\r\n    .product-item {\r\n      border: 2px solid #e9ecef;\r\n      border-radius: 8px;\r\n      padding: 1rem;\r\n      text-align: center;\r\n    }\r\n\r\n    .product-image {\r\n      width: 100px;\r\n      height: 100px;\r\n      object-fit: cover;\r\n      border-radius: 8px;\r\n      margin-bottom: 1rem;\r\n    }\r\n\r\n    .product-price {\r\n      color: #667eea;\r\n      font-weight: bold;\r\n      margin-bottom: 1rem;\r\n    }\r\n\r\n    .cart-item {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 1rem;\r\n      padding: 1rem;\r\n      border: 1px solid #e9ecef;\r\n      border-radius: 8px;\r\n      margin-bottom: 1rem;\r\n    }\r\n\r\n    .cart-item-image {\r\n      width: 60px;\r\n      height: 60px;\r\n      object-fit: cover;\r\n      border-radius: 8px;\r\n    }\r\n\r\n    .cart-item-controls {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 0.5rem;\r\n      margin-left: auto;\r\n    }\r\n\r\n    .btn-quantity {\r\n      background: #6c757d;\r\n      color: white;\r\n      border: none;\r\n      border-radius: 4px;\r\n      width: 30px;\r\n      height: 30px;\r\n      cursor: pointer;\r\n    }\r\n\r\n    .quantity {\r\n      min-width: 30px;\r\n      text-align: center;\r\n      font-weight: bold;\r\n    }\r\n\r\n    .cart-summary {\r\n      background: #f8f9fa;\r\n      padding: 1rem;\r\n      border-radius: 8px;\r\n      margin-top: 1rem;\r\n    }\r\n\r\n    .summary-row {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      margin-bottom: 0.5rem;\r\n    }\r\n\r\n    .summary-row.total {\r\n      font-weight: bold;\r\n      font-size: 1.1rem;\r\n      border-top: 1px solid #dee2e6;\r\n      padding-top: 0.5rem;\r\n      margin-top: 0.5rem;\r\n    }\r\n\r\n    .empty-cart {\r\n      text-align: center;\r\n      color: #6c757d;\r\n      font-style: italic;\r\n      padding: 2rem;\r\n    }\r\n\r\n    /* Theme Switcher Styles */\r\n    .theme-controls {\r\n      margin-bottom: 1rem;\r\n    }\r\n\r\n    .theme-preview {\r\n      padding: 1rem;\r\n      border-radius: 8px;\r\n      margin-bottom: 1rem;\r\n      border: 2px solid #e9ecef;\r\n    }\r\n\r\n    .sample-card {\r\n      background: rgba(255, 255, 255, 0.1);\r\n      padding: 1rem;\r\n      border-radius: 8px;\r\n      margin-top: 1rem;\r\n    }\r\n\r\n    .theme-presets h4 {\r\n      margin-bottom: 1rem;\r\n    }\r\n\r\n    .preset-buttons {\r\n      display: flex;\r\n      gap: 0.5rem;\r\n      flex-wrap: wrap;\r\n    }\r\n\r\n    @media (max-width: 768px) {\r\n      .page-header h1 {\r\n        font-size: 2rem;\r\n      }\r\n      \r\n      .add-widget {\r\n        flex-direction: column;\r\n      }\r\n      \r\n      .cart-item {\r\n        flex-direction: column;\r\n        text-align: center;\r\n      }\r\n      \r\n      .cart-item-controls {\r\n        margin-left: 0;\r\n        margin-top: 1rem;\r\n      }\r\n    }\r\n  `]\r\n})\r\ninterface Widget {\r\n  type: string;\r\n  title: string;\r\n  value?: string | number;\r\n  label?: string;\r\n  change?: number;\r\n  data?: Array<{label: string, value: number}>;\r\n  items?: Array<{text: string, status: string}>;\r\n  progress?: number;\r\n}\r\n\r\nexport class ExamplesComponent {\r\n  // Profile Form\r\n  profile = {\r\n    fullName: '',\r\n    email: '',\r\n    age: null as number | null,\r\n    bio: '',\r\n    skills: [] as string[],\r\n    theme: 'light',\r\n    notifications: {\r\n      email: false,\r\n      push: false\r\n    }\r\n  };\r\n\r\n  availableSkills = ['JavaScript', 'TypeScript', 'Angular', 'React', 'Vue', 'Node.js', 'Python', 'Java'];\r\n\r\n  // Dashboard\r\n  newWidgetType = '';\r\n  widgets: Widget[] = [\r\n    {\r\n      type: 'metric',\r\n      title: 'Total Users',\r\n      value: '1,234',\r\n      label: 'Active Users',\r\n      change: 12.5\r\n    },\r\n    {\r\n      type: 'chart',\r\n      title: 'Monthly Growth',\r\n      data: [\r\n        { label: 'Jan', value: 65 },\r\n        { label: 'Feb', value: 78 },\r\n        { label: 'Mar', value: 82 },\r\n        { label: 'Apr', value: 91 }\r\n      ]\r\n    }\r\n  ];\r\n\r\n  // Shopping Cart\r\n  availableProducts = [\r\n    { id: 1, name: 'Laptop', price: 999.99, image: 'https://via.placeholder.com/100x100/667eea/ffffff?text=Laptop' },\r\n    { id: 2, name: 'Mouse', price: 29.99, image: 'https://via.placeholder.com/100x100/764ba2/ffffff?text=Mouse' },\r\n    { id: 3, name: 'Keyboard', price: 89.99, image: 'https://via.placeholder.com/100x100/667eea/ffffff?text=Keyboard' }\r\n  ];\r\n\r\n  cart: Array<{product: any, quantity: number}> = [];\r\n  taxRate = 0.08;\r\n\r\n  // Theme Switcher\r\n  themeColors = {\r\n    primary: '#667eea',\r\n    secondary: '#764ba2',\r\n    background: '#ffffff',\r\n    text: '#333333'\r\n  };\r\n\r\n  // Methods\r\n  toggleSkill(skill: string) {\r\n    const index = this.profile.skills.indexOf(skill);\r\n    if (index > -1) {\r\n      this.profile.skills.splice(index, 1);\r\n    } else {\r\n      this.profile.skills.push(skill);\r\n    }\r\n  }\r\n\r\n  isFormValid(): boolean {\r\n    return Boolean(this.profile.fullName && this.profile.email);\r\n  }\r\n\r\n  saveProfile() {\r\n    console.log('Profile saved:', this.profile);\r\n    alert('Profile saved successfully!');\r\n  }\r\n\r\n  getNotificationStatus(): string {\r\n    const notifications = [];\r\n    if (this.profile.notifications.email) notifications.push('Email');\r\n    if (this.profile.notifications.push) notifications.push('Push');\r\n    return notifications.length > 0 ? notifications.join(', ') : 'None';\r\n  }\r\n\r\n  addWidget() {\r\n    const widget = this.createWidget(this.newWidgetType);\r\n    if (widget) {\r\n      this.widgets.push(widget);\r\n      this.newWidgetType = '';\r\n    }\r\n  }\r\n\r\n  removeWidget(index: number) {\r\n    this.widgets.splice(index, 1);\r\n  }\r\n\r\n  createWidget(type: string): Widget | null {\r\n    switch (type) {\r\n      case 'chart':\r\n        return {\r\n          type: 'chart',\r\n          title: 'New Chart',\r\n          data: [\r\n            { label: 'A', value: Math.floor(Math.random() * 100) },\r\n            { label: 'B', value: Math.floor(Math.random() * 100) },\r\n            { label: 'C', value: Math.floor(Math.random() * 100) }\r\n          ]\r\n        };\r\n      case 'metric':\r\n        return {\r\n          type: 'metric',\r\n          title: 'New Metric',\r\n          value: Math.floor(Math.random() * 1000),\r\n          label: 'Units',\r\n          change: Math.floor(Math.random() * 20) - 10\r\n        };\r\n      case 'list':\r\n        return {\r\n          type: 'list',\r\n          title: 'New List',\r\n          items: [\r\n            { text: 'Item 1', status: 'pending' },\r\n            { text: 'Item 2', status: 'completed' },\r\n            { text: 'Item 3', status: 'failed' }\r\n          ]\r\n        };\r\n      case 'progress':\r\n        return {\r\n          type: 'progress',\r\n          title: 'New Progress',\r\n          progress: Math.floor(Math.random() * 100)\r\n        };\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  getActiveWidgetsCount(): number {\r\n    return this.widgets.length;\r\n  }\r\n\r\n  addToCart(product: any) {\r\n    const existingItem = this.cart.find(item => item.product.id === product.id);\r\n    if (existingItem) {\r\n      existingItem.quantity++;\r\n    } else {\r\n      this.cart.push({ product, quantity: 1 });\r\n    }\r\n  }\r\n\r\n  removeFromCart(index: number) {\r\n    this.cart.splice(index, 1);\r\n  }\r\n\r\n  increaseQuantity(index: number) {\r\n    this.cart[index].quantity++;\r\n  }\r\n\r\n  decreaseQuantity(index: number) {\r\n    if (this.cart[index].quantity > 1) {\r\n      this.cart[index].quantity--;\r\n    } else {\r\n      this.removeFromCart(index);\r\n    }\r\n  }\r\n\r\n  getSubtotal(): number {\r\n    return this.cart.reduce((sum, item) => sum + (item.product.price * item.quantity), 0);\r\n  }\r\n\r\n  getTax(): number {\r\n    return this.getSubtotal() * this.taxRate;\r\n  }\r\n\r\n  getTotal(): number {\r\n    return this.getSubtotal() + this.getTax();\r\n  }\r\n\r\n  checkout() {\r\n    alert(`Total: $${this.getTotal().toFixed(2)}\\nThank you for your purchase!`);\r\n    this.cart = [];\r\n  }\r\n\r\n  updateTheme() {\r\n    // This would typically update CSS custom properties\r\n    console.log('Theme updated:', this.themeColors);\r\n  }\r\n\r\n  getThemeStyles(): string {\r\n    return `\r\n      --primary-color: ${this.themeColors.primary};\r\n      --secondary-color: ${this.themeColors.secondary};\r\n      --background-color: ${this.themeColors.background};\r\n      --text-color: ${this.themeColors.text};\r\n      background-color: ${this.themeColors.background};\r\n      color: ${this.themeColors.text};\r\n    `;\r\n  }\r\n\r\n  applyPreset(preset: string) {\r\n    const presets: Record<string, { primary: string; secondary: string; background: string; text: string }> = {\r\n      default: { primary: '#667eea', secondary: '#764ba2', background: '#ffffff', text: '#333333' },\r\n      dark: { primary: '#4a5568', secondary: '#2d3748', background: '#1a202c', text: '#f7fafc' },\r\n      ocean: { primary: '#3182ce', secondary: '#2b6cb0', background: '#ebf8ff', text: '#2d3748' },\r\n      sunset: { primary: '#ed8936', secondary: '#dd6b20', background: '#fffaf0', text: '#744210' }\r\n    };\r\n    \r\n    this.themeColors = { ...presets[preset] };\r\n    this.updateTheme();\r\n  }\r\n}\r\n"],"mappings":"AA6oBA,OAAM,MAAOA,iBAAiB;EAA9BC,YAAA;IACE;IACA,KAAAC,OAAO,GAAG;MACRC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,EAAE;MACTC,GAAG,EAAE,IAAqB;MAC1BC,GAAG,EAAE,EAAE;MACPC,MAAM,EAAE,EAAc;MACtBC,KAAK,EAAE,OAAO;MACdC,aAAa,EAAE;QACbL,KAAK,EAAE,KAAK;QACZM,IAAI,EAAE;;KAET;IAED,KAAAC,eAAe,GAAG,CAAC,YAAY,EAAE,YAAY,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,CAAC;IAEtG;IACA,KAAAC,aAAa,GAAG,EAAE;IAClB,KAAAC,OAAO,GAAa,CAClB;MACEC,IAAI,EAAE,QAAQ;MACdC,KAAK,EAAE,aAAa;MACpBC,KAAK,EAAE,OAAO;MACdC,KAAK,EAAE,cAAc;MACrBC,MAAM,EAAE;KACT,EACD;MACEJ,IAAI,EAAE,OAAO;MACbC,KAAK,EAAE,gBAAgB;MACvBI,IAAI,EAAE,CACJ;QAAEF,KAAK,EAAE,KAAK;QAAED,KAAK,EAAE;MAAE,CAAE,EAC3B;QAAEC,KAAK,EAAE,KAAK;QAAED,KAAK,EAAE;MAAE,CAAE,EAC3B;QAAEC,KAAK,EAAE,KAAK;QAAED,KAAK,EAAE;MAAE,CAAE,EAC3B;QAAEC,KAAK,EAAE,KAAK;QAAED,KAAK,EAAE;MAAE,CAAE;KAE9B,CACF;IAED;IACA,KAAAI,iBAAiB,GAAG,CAClB;MAAEC,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,QAAQ;MAAEC,KAAK,EAAE,MAAM;MAAEC,KAAK,EAAE;IAA+D,CAAE,EAChH;MAAEH,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,OAAO;MAAEC,KAAK,EAAE,KAAK;MAAEC,KAAK,EAAE;IAA8D,CAAE,EAC7G;MAAEH,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,UAAU;MAAEC,KAAK,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAiE,CAAE,CACpH;IAED,KAAAC,IAAI,GAA4C,EAAE;IAClD,KAAAC,OAAO,GAAG,IAAI;IAEd;IACA,KAAAC,WAAW,GAAG;MACZC,OAAO,EAAE,SAAS;MAClBC,SAAS,EAAE,SAAS;MACpBC,UAAU,EAAE,SAAS;MACrBC,IAAI,EAAE;KACP;EA0JH;EAxJE;EACAC,WAAWA,CAACC,KAAa;IACvB,MAAMC,KAAK,GAAG,IAAI,CAAChC,OAAO,CAACK,MAAM,CAAC4B,OAAO,CAACF,KAAK,CAAC;IAChD,IAAIC,KAAK,GAAG,CAAC,CAAC,EAAE;MACd,IAAI,CAAChC,OAAO,CAACK,MAAM,CAAC6B,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;KACrC,MAAM;MACL,IAAI,CAAChC,OAAO,CAACK,MAAM,CAACG,IAAI,CAACuB,KAAK,CAAC;;EAEnC;EAEAI,WAAWA,CAAA;IACT,OAAOC,OAAO,CAAC,IAAI,CAACpC,OAAO,CAACC,QAAQ,IAAI,IAAI,CAACD,OAAO,CAACE,KAAK,CAAC;EAC7D;EAEAmC,WAAWA,CAAA;IACTC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAACvC,OAAO,CAAC;IAC3CwC,KAAK,CAAC,6BAA6B,CAAC;EACtC;EAEAC,qBAAqBA,CAAA;IACnB,MAAMlC,aAAa,GAAG,EAAE;IACxB,IAAI,IAAI,CAACP,OAAO,CAACO,aAAa,CAACL,KAAK,EAAEK,aAAa,CAACC,IAAI,CAAC,OAAO,CAAC;IACjE,IAAI,IAAI,CAACR,OAAO,CAACO,aAAa,CAACC,IAAI,EAAED,aAAa,CAACC,IAAI,CAAC,MAAM,CAAC;IAC/D,OAAOD,aAAa,CAACmC,MAAM,GAAG,CAAC,GAAGnC,aAAa,CAACoC,IAAI,CAAC,IAAI,CAAC,GAAG,MAAM;EACrE;EAEAC,SAASA,CAAA;IACP,MAAMC,MAAM,GAAG,IAAI,CAACC,YAAY,CAAC,IAAI,CAACpC,aAAa,CAAC;IACpD,IAAImC,MAAM,EAAE;MACV,IAAI,CAAClC,OAAO,CAACH,IAAI,CAACqC,MAAM,CAAC;MACzB,IAAI,CAACnC,aAAa,GAAG,EAAE;;EAE3B;EAEAqC,YAAYA,CAACf,KAAa;IACxB,IAAI,CAACrB,OAAO,CAACuB,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;EAC/B;EAEAc,YAAYA,CAAClC,IAAY;IACvB,QAAQA,IAAI;MACV,KAAK,OAAO;QACV,OAAO;UACLA,IAAI,EAAE,OAAO;UACbC,KAAK,EAAE,WAAW;UAClBI,IAAI,EAAE,CACJ;YAAEF,KAAK,EAAE,GAAG;YAAED,KAAK,EAAEkC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,GAAG;UAAC,CAAE,EACtD;YAAEnC,KAAK,EAAE,GAAG;YAAED,KAAK,EAAEkC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,GAAG;UAAC,CAAE,EACtD;YAAEnC,KAAK,EAAE,GAAG;YAAED,KAAK,EAAEkC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,GAAG;UAAC,CAAE;SAEzD;MACH,KAAK,QAAQ;QACX,OAAO;UACLtC,IAAI,EAAE,QAAQ;UACdC,KAAK,EAAE,YAAY;UACnBC,KAAK,EAAEkC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,IAAI,CAAC;UACvCnC,KAAK,EAAE,OAAO;UACdC,MAAM,EAAEgC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,EAAE,CAAC,GAAG;SAC1C;MACH,KAAK,MAAM;QACT,OAAO;UACLtC,IAAI,EAAE,MAAM;UACZC,KAAK,EAAE,UAAU;UACjBsC,KAAK,EAAE,CACL;YAAEtB,IAAI,EAAE,QAAQ;YAAEuB,MAAM,EAAE;UAAS,CAAE,EACrC;YAAEvB,IAAI,EAAE,QAAQ;YAAEuB,MAAM,EAAE;UAAW,CAAE,EACvC;YAAEvB,IAAI,EAAE,QAAQ;YAAEuB,MAAM,EAAE;UAAQ,CAAE;SAEvC;MACH,KAAK,UAAU;QACb,OAAO;UACLxC,IAAI,EAAE,UAAU;UAChBC,KAAK,EAAE,cAAc;UACrBwC,QAAQ,EAAEL,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,GAAG;SACzC;MACH;QACE,OAAO,IAAI;;EAEjB;EAEAI,qBAAqBA,CAAA;IACnB,OAAO,IAAI,CAAC3C,OAAO,CAAC+B,MAAM;EAC5B;EAEAa,SAASA,CAACC,OAAY;IACpB,MAAMC,YAAY,GAAG,IAAI,CAAClC,IAAI,CAACmC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACH,OAAO,CAACrC,EAAE,KAAKqC,OAAO,CAACrC,EAAE,CAAC;IAC3E,IAAIsC,YAAY,EAAE;MAChBA,YAAY,CAACG,QAAQ,EAAE;KACxB,MAAM;MACL,IAAI,CAACrC,IAAI,CAACf,IAAI,CAAC;QAAEgD,OAAO;QAAEI,QAAQ,EAAE;MAAC,CAAE,CAAC;;EAE5C;EAEAC,cAAcA,CAAC7B,KAAa;IAC1B,IAAI,CAACT,IAAI,CAACW,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;EAC5B;EAEA8B,gBAAgBA,CAAC9B,KAAa;IAC5B,IAAI,CAACT,IAAI,CAACS,KAAK,CAAC,CAAC4B,QAAQ,EAAE;EAC7B;EAEAG,gBAAgBA,CAAC/B,KAAa;IAC5B,IAAI,IAAI,CAACT,IAAI,CAACS,KAAK,CAAC,CAAC4B,QAAQ,GAAG,CAAC,EAAE;MACjC,IAAI,CAACrC,IAAI,CAACS,KAAK,CAAC,CAAC4B,QAAQ,EAAE;KAC5B,MAAM;MACL,IAAI,CAACC,cAAc,CAAC7B,KAAK,CAAC;;EAE9B;EAEAgC,WAAWA,CAAA;IACT,OAAO,IAAI,CAACzC,IAAI,CAAC0C,MAAM,CAAC,CAACC,GAAG,EAAEP,IAAI,KAAKO,GAAG,GAAIP,IAAI,CAACH,OAAO,CAACnC,KAAK,GAAGsC,IAAI,CAACC,QAAS,EAAE,CAAC,CAAC;EACvF;EAEAO,MAAMA,CAAA;IACJ,OAAO,IAAI,CAACH,WAAW,EAAE,GAAG,IAAI,CAACxC,OAAO;EAC1C;EAEA4C,QAAQA,CAAA;IACN,OAAO,IAAI,CAACJ,WAAW,EAAE,GAAG,IAAI,CAACG,MAAM,EAAE;EAC3C;EAEAE,QAAQA,CAAA;IACN7B,KAAK,CAAC,WAAW,IAAI,CAAC4B,QAAQ,EAAE,CAACE,OAAO,CAAC,CAAC,CAAC,gCAAgC,CAAC;IAC5E,IAAI,CAAC/C,IAAI,GAAG,EAAE;EAChB;EAEAgD,WAAWA,CAAA;IACT;IACAjC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAACd,WAAW,CAAC;EACjD;EAEA+C,cAAcA,CAAA;IACZ,OAAO;yBACc,IAAI,CAAC/C,WAAW,CAACC,OAAO;2BACtB,IAAI,CAACD,WAAW,CAACE,SAAS;4BACzB,IAAI,CAACF,WAAW,CAACG,UAAU;sBACjC,IAAI,CAACH,WAAW,CAACI,IAAI;0BACjB,IAAI,CAACJ,WAAW,CAACG,UAAU;eACtC,IAAI,CAACH,WAAW,CAACI,IAAI;KAC/B;EACH;EAEA4C,WAAWA,CAACC,MAAc;IACxB,MAAMC,OAAO,GAA6F;MACxGC,OAAO,EAAE;QAAElD,OAAO,EAAE,SAAS;QAAEC,SAAS,EAAE,SAAS;QAAEC,UAAU,EAAE,SAAS;QAAEC,IAAI,EAAE;MAAS,CAAE;MAC7FgD,IAAI,EAAE;QAAEnD,OAAO,EAAE,SAAS;QAAEC,SAAS,EAAE,SAAS;QAAEC,UAAU,EAAE,SAAS;QAAEC,IAAI,EAAE;MAAS,CAAE;MAC1FiD,KAAK,EAAE;QAAEpD,OAAO,EAAE,SAAS;QAAEC,SAAS,EAAE,SAAS;QAAEC,UAAU,EAAE,SAAS;QAAEC,IAAI,EAAE;MAAS,CAAE;MAC3FkD,MAAM,EAAE;QAAErD,OAAO,EAAE,SAAS;QAAEC,SAAS,EAAE,SAAS;QAAEC,UAAU,EAAE,SAAS;QAAEC,IAAI,EAAE;MAAS;KAC3F;IAED,IAAI,CAACJ,WAAW,GAAG;MAAE,GAAGkD,OAAO,CAACD,MAAM;IAAC,CAAE;IACzC,IAAI,CAACH,WAAW,EAAE;EACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}